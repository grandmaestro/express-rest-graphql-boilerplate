#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app'),
	http = require('http'),
	metrics = require('../utilities/metrics.util'),
	cache = require('../utilities/memcache.util'),
	mysql = require('../db/mysql');

/**
 * To provide graceful shutdown of the application
 */
process.on('SIGTERM', () => {
	console.info('SIGTERM signal received.');
	console.log('Closing http server.');
	server.close(() => {
		console.log('Http server closed.');
		metrics.close();
		console.log('Closed statsd client connection');
		cache.close();
		console.log('Closed node cache');
		mysql.closePoolCluster();
		console.log('Closed mysql pool');
		process.exit(0);
	});
});

/**
 * To provide graceful shutdown of the application
 */
process.on('SIGINT', () => {
	console.info('SIGINT signal received.');
	console.log('Closing http server.');
	server.close(() => {
		console.log('Http server closed.');
		metrics.close();
		console.log('Closed statsd client connection');
		cache.close();
		console.log('Closed node cache');
		mysql.closePoolCluster();
		console.log('Closed mysql pool');
		process.exit(0);
	});
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.timeout = 180000;   // Express server timeout 3 minutes
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ?
		'Pipe ' + port :
		'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;
	console.log('Listening on ' + bind);
}